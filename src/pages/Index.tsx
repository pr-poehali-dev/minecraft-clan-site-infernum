import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Label } from '@/components/ui/label';
import { Separator } from '@/components/ui/separator';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Checkbox } from '@/components/ui/checkbox';
import { Alert, AlertDescription } from '@/components/ui/alert';
import Icon from '@/components/ui/icon';

const Index = () => {
  const [applicationForm, setApplicationForm] = useState({
    username: '',
    discordTag: '',
    experience: '',
    motivation: ''
  });

  const [currentUser] = useState({
    name: '–ö–æ–Ω—Ñ—É—Ü–∏–π',
    role: '–ö–æ–Ω—Ñ—É—Ü–∏–π',
    hasAdminRights: true
  });

  const [editMode, setEditMode] = useState({
    news: false,
    gallery: false,
    rules: false,
    members: false
  });

  const [notifications, setNotifications] = useState<Array<{
    id: string;
    message: string;
    type: 'success' | 'warning' | 'info';
    timestamp: Date;
  }>>([]);

  const [activityLogs, setActivityLogs] = useState<Array<{
    id: string;
    user: string;
    action: string;
    target: string;
    timestamp: Date;
  }>>([
    {
      id: '1',
      user: '–ö–æ–Ω—Ñ—É—Ü–∏–π',
      action: '–°–æ–∑–¥–∞–ª —Ä–æ–ª—å',
      target: '–ú–∞—Å—Ç–µ—Ä –ö—É–∑–Ω–µ—Ü',
      timestamp: new Date('2025-08-01T10:30:00')
    },
    {
      id: '2',
      user: '–ö–æ–Ω—Ñ—É—Ü–∏–π',
      action: '–î–æ–±–∞–≤–∏–ª –Ω–æ–≤–æ—Å—Ç—å',
      target: '–§–µ—Å—Ç–∏–≤–∞–ª—å –∫—Ä–∞—Å–Ω—ã—Ö —Ñ–æ–Ω–∞—Ä–µ–π',
      timestamp: new Date('2025-08-01T09:15:00')
    }
  ]);

  const [editingItem, setEditingItem] = useState<any>(null);
  const [editDialogOpen, setEditDialogOpen] = useState(false);
  const [editType, setEditType] = useState<'news' | 'gallery' | 'rules' | 'role' | null>(null);

  const [roles, setRoles] = useState([
    { 
      id: '1', 
      name: '–ö–æ–Ω—Ñ—É—Ü–∏–π', 
      color: '#dc2626', 
      description: '–í–µ—Ä—Ö–æ–≤–Ω—ã–π –º—É–¥—Ä–µ—Ü –∫–ª–∞–Ω–∞',
      permissions: {
        manageRoles: true,
        editContent: true,
        manageMembers: true,
        deleteContent: true,
        viewReports: true
      }
    },
    { 
      id: '2', 
      name: '–ì–ª–∞–≤–Ω—ã–π –ò–Ω–∂–µ–Ω–µ—Ä', 
      color: '#FFD700', 
      description: '–õ–∏–¥–µ—Ä –∫–ª–∞–Ω–∞',
      permissions: {
        manageRoles: false,
        editContent: true,
        manageMembers: true,
        deleteContent: false,
        viewReports: true
      }
    },
    { 
      id: '3', 
      name: '–ú–∞—Å—Ç–µ—Ä –ö—É–∑–Ω–µ—Ü', 
      color: '#FF6B35', 
      description: '–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –ª–∏–¥–µ—Ä–∞',
      permissions: {
        manageRoles: false,
        editContent: true,
        manageMembers: false,
        deleteContent: false,
        viewReports: false
      }
    },
    { 
      id: '4', 
      name: '–ú–µ—Ö–∞–Ω–∏–∫', 
      color: '#8B4513', 
      description: '–û—Ñ–∏—Ü–µ—Ä –∫–ª–∞–Ω–∞',
      permissions: {
        manageRoles: false,
        editContent: false,
        manageMembers: false,
        deleteContent: false,
        viewReports: false
      }
    },
    { 
      id: '5', 
      name: '–ò–∑–æ–±—Ä–µ—Ç–∞—Ç–µ–ª—å', 
      color: '#B87333', 
      description: '–ê–∫—Ç–∏–≤–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫',
      permissions: {
        manageRoles: false,
        editContent: false,
        manageMembers: false,
        deleteContent: false,
        viewReports: false
      }
    },
    { 
      id: '6', 
      name: '–ò–Ω–∂–µ–Ω–µ—Ä', 
      color: '#4A4A4A', 
      description: '–£—á–∞—Å—Ç–Ω–∏–∫ –∫–ª–∞–Ω–∞',
      permissions: {
        manageRoles: false,
        editContent: false,
        manageMembers: false,
        deleteContent: false,
        viewReports: false
      }
    }
  ]);

  const [newRole, setNewRole] = useState({
    name: '',
    color: '#FFD700',
    description: '',
    permissions: {
      manageRoles: false,
      editContent: false,
      manageMembers: false,
      deleteContent: false,
      viewReports: false
    }
  });

  const [members, setMembers] = useState([
    { id: '1', name: 'SteamMaster_Yuki', rank: '–ì–ª–∞–≤–Ω—ã–π –ò–Ω–∂–µ–Ω–µ—Ä', role: '–õ–∏–¥–µ—Ä –∫–ª–∞–Ω–∞', status: 'online', roleColor: '#FFD700' },
    { id: '2', name: 'GearForge_Akira', rank: '–ú–∞—Å—Ç–µ—Ä –ö—É–∑–Ω–µ—Ü', role: '–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å', status: 'online', roleColor: '#FF6B35' },
    { id: '3', name: 'CopperWind_Sato', rank: '–ú–µ—Ö–∞–Ω–∏–∫', role: '–û—Ñ–∏—Ü–µ—Ä', status: 'away', roleColor: '#8B4513' },
    { id: '4', name: 'BrassStorm_Kenji', rank: '–ò–∑–æ–±—Ä–µ—Ç–∞—Ç–µ–ª—å', role: '–£—á–∞—Å—Ç–Ω–∏–∫', status: 'offline', roleColor: '#B87333' },
    { id: '5', name: 'IronDragon_Hana', rank: '–ò–Ω–∂–µ–Ω–µ—Ä', role: '–£—á–∞—Å—Ç–Ω–∏–∫', status: 'online', roleColor: '#4A4A4A' },
    { id: '6', name: '–ö–æ–Ω—Ñ—É—Ü–∏–π', rank: '–ö–æ–Ω—Ñ—É—Ü–∏–π', role: '–í–µ—Ä—Ö–æ–≤–Ω—ã–π –º—É–¥—Ä–µ—Ü', status: 'online', roleColor: '#dc2626' }
  ]);

  const [news, setNews] = useState([
    {
      id: '1',
      title: 'üèÆ –§–µ—Å—Ç–∏–≤–∞–ª—å –∫—Ä–∞—Å–Ω—ã—Ö —Ñ–æ–Ω–∞—Ä–µ–π',
      date: '1 –∞–≤–≥—É—Å—Ç–∞ 2025',
      content: '–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π —è–ø–æ–Ω—Å–∫–∏–π —Ñ–µ—Å—Ç–∏–≤–∞–ª—å! –£–∫—Ä–∞—à–∞–µ–º –±–∞–∑—É –∫—Ä–∞—Å–Ω—ã–º–∏ —Ñ–æ–Ω–∞—Ä–∏–∫–∞–º–∏ –∏ —Å—Ç—Ä–æ–∏–º —Å–≤—è—Ç–∏–ª–∏—â–∞.'
    },
    {
      id: '2',
      title: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–Ω–æ–≤–æ–π –±–∞–∑—ã',
      date: '28 –∏—é–ª—è 2025',
      content: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –Ω–æ–≤–æ–π —Å—Ç–∏–º–ø–∞–Ω–∫ –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ –∫—Ä–∞—Ñ—Ç–∞.'
    },
    {
      id: '3',
      title: '–ù–∞–±–æ—Ä –≤ –∫–ª–∞–Ω –æ—Ç–∫—Ä—ã—Ç!',
      date: '25 –∏—é–ª—è 2025', 
      content: '–ü—Ä–∏–≥–ª–∞—à–∞–µ–º –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–ª–∞–Ω—É Infernum. –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: –æ–ø—ã—Ç –∏–≥—Ä—ã –æ—Ç 100 —á–∞—Å–æ–≤.'
    },
    {
      id: '4',
      title: '–¢—É—Ä–Ω–∏—Ä –º–µ–∂–¥—É –∫–ª–∞–Ω–∞–º–∏',
      date: '20 –∏—é–ª—è 2025',
      content: '–ü–æ–±–µ–¥–∞ –≤ –º–µ–∂–∫–ª–∞–Ω–æ–≤–æ–º —Ç—É—Ä–Ω–∏—Ä–µ! Infernum –∑–∞–Ω—è–ª 1 –º–µ—Å—Ç–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–õ—É—á—à–∏–µ –ø–æ—Å—Ç—Ä–æ–π–∫–∏".'
    }
  ]);

  const [newNewsItem, setNewNewsItem] = useState({
    title: '',
    content: ''
  });

  const [gallery, setGallery] = useState([
    { id: '1', title: '–ö–ª–∞–Ω–æ–≤–∞—è –±–∞–∑–∞', image: '/img/898a4a62-680e-4954-8324-57f0b6423198.jpg' },
    { id: '2', title: '–Ø–ø–æ–Ω—Å–∫–∏–µ —Ñ–æ–Ω–∞—Ä–∏–∫–∏', image: '/img/69d0941d-94f1-4667-aea7-2a84f6074202.jpg' },
    { id: '3', title: '–°–≤—è—Ç–∏–ª–∏—â–µ –¢–æ—Ä–∏–∏', image: '/img/51c0d897-82e2-4d99-b8eb-1ad1f55a57aa.jpg' },
    { id: '4', title: '–°—Ç–∏–º–ø–∞–Ω–∫ –º–∞—Å—Ç–µ—Ä—Å–∫–∞—è', image: '/img/898a4a62-680e-4954-8324-57f0b6423198.jpg' },
    { id: '5', title: '–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏', image: '/img/898a4a62-680e-4954-8324-57f0b6423198.jpg' }
  ]);

  const [newGalleryItem, setNewGalleryItem] = useState({
    title: '',
    image: ''
  });

  const [rules, setRules] = useState([
    { id: '1', title: '–£–≤–∞–∂–µ–Ω–∏–µ –∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º', desc: '–°–æ–±–ª—é–¥–∞–π—Ç–µ –≤–∑–∞–∏–º–Ω–æ–µ —É–≤–∞–∂–µ–Ω–∏–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –¥—Ä—É–∂–µ—Å–∫—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É' },
    { id: '2', title: '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', desc: '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - 2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é' },
    { id: '3', title: '–°—Ç–∏–ª—å –ø–æ—Å—Ç—Ä–æ–µ–∫', desc: '–í—Å–µ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å—Ç–∏–º–ø–∞–Ω–∫ —Ç–µ–º–∞—Ç–∏–∫–µ –∫–ª–∞–Ω–∞' },
    { id: '4', title: 'Discord –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω', desc: '–ù–∞–ª–∏—á–∏–µ Discord –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –∏ –æ–±—â–µ–Ω–∏—è' },
    { id: '5', title: '–ü–æ–º–æ—â—å –Ω–æ–≤–∏—á–∫–∞–º', desc: '–û–ø—ã—Ç–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ –ø–æ–º–æ–≥–∞—é—Ç –Ω–æ–≤—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –æ—Å–≤–æ–∏—Ç—å—Å—è' },
    { id: '6', title: '–Ø–ø–æ–Ω—Å–∫–∏–µ —Ç—Ä–∞–¥–∏—Ü–∏–∏', desc: '–£–≤–∞–∂–∞–π—Ç–µ —è–ø–æ–Ω—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –¥–∏–∑–∞–π–Ω–µ –±–∞–∑—ã –∏ –ø–æ—Å—Ç—Ä–æ–µ–∫' }
  ]);

  const [newRule, setNewRule] = useState({
    title: '',
    desc: ''
  });

  const permissionLabels = {
    manageRoles: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏',
    editContent: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞',
    manageMembers: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏',
    deleteContent: '–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞',
    viewReports: '–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–æ–≤'
  };

  const addNotification = (message: string, type: 'success' | 'warning' | 'info' = 'success') => {
    const notification = {
      id: Date.now().toString(),
      message,
      type,
      timestamp: new Date()
    };
    setNotifications(prev => [notification, ...prev.slice(0, 4)]);
    
    setTimeout(() => {
      setNotifications(prev => prev.filter(n => n.id !== notification.id));
    }, 5000);
  };

  const addLog = (action: string, target: string) => {
    const log = {
      id: Date.now().toString(),
      user: currentUser.name,
      action,
      target,
      timestamp: new Date()
    };
    setActivityLogs(prev => [log, ...prev.slice(0, 49)]);
  };

  const openEditDialog = (item: any, type: 'news' | 'gallery' | 'rules' | 'role') => {
    setEditingItem({ ...item });
    setEditType(type);
    setEditDialogOpen(true);
  };

  const handleEditSave = () => {
    if (!editingItem || !editType) return;

    switch (editType) {
      case 'news':
        setNews(news.map(item => 
          item.id === editingItem.id ? editingItem : item
        ));
        addLog('–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª –Ω–æ–≤–æ—Å—Ç—å', editingItem.title);
        addNotification('–ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
        break;
      case 'gallery':
        setGallery(gallery.map(item => 
          item.id === editingItem.id ? editingItem : item
        ));
        addLog('–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª —ç–ª–µ–º–µ–Ω—Ç –≥–∞–ª–µ—Ä–µ–∏', editingItem.title);
        addNotification('–≠–ª–µ–º–µ–Ω—Ç –≥–∞–ª–µ—Ä–µ–∏ –æ–±–Ω–æ–≤–ª–µ–Ω');
        break;
      case 'rules':
        setRules(rules.map(item => 
          item.id === editingItem.id ? editingItem : item
        ));
        addLog('–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª –ø—Ä–∞–≤–∏–ª–æ', editingItem.title);
        addNotification('–ü—Ä–∞–≤–∏–ª–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
        break;
      case 'role':
        setRoles(roles.map(item => 
          item.id === editingItem.id ? editingItem : item
        ));
        addLog('–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª —Ä–æ–ª—å', editingItem.name);
        addNotification('–†–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
        break;
    }

    setEditDialogOpen(false);
    setEditingItem(null);
    setEditType(null);
  };

  const handleApplicationSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    addNotification('–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ Discord –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.', 'info');
  };

  const handleCreateRole = (e: React.FormEvent) => {
    e.preventDefault();
    const role = {
      id: Date.now().toString(),
      ...newRole
    };
    setRoles([...roles, role]);
    setNewRole({ 
      name: '', 
      color: '#FFD700', 
      description: '',
      permissions: {
        manageRoles: false,
        editContent: false,
        manageMembers: false,
        deleteContent: false,
        viewReports: false
      }
    });
    addLog('–°–æ–∑–¥–∞–ª —Ä–æ–ª—å', role.name);
    addNotification('–†–æ–ª—å —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
  };

  const handleMemberRoleChange = (memberId: string, newRankId: string) => {
    const selectedRole = roles.find(role => role.id === newRankId);
    if (!selectedRole) return;

    const member = members.find(m => m.id === memberId);
    if (member) {
      setMembers(members.map(m => 
        m.id === memberId 
          ? { ...m, rank: selectedRole.name, roleColor: selectedRole.color }
          : m
      ));
      addLog('–ò–∑–º–µ–Ω–∏–ª —Ä–æ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–∞', `${member.name} ‚Üí ${selectedRole.name}`);
      addNotification(`–†–æ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${member.name} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${selectedRole.name}`);
    }
  };

  const handleAddNews = (e: React.FormEvent) => {
    e.preventDefault();
    const newsItem = {
      id: Date.now().toString(),
      title: newNewsItem.title,
      date: new Date().toLocaleDateString('ru-RU'),
      content: newNewsItem.content
    };
    setNews([newsItem, ...news]);
    setNewNewsItem({ title: '', content: '' });
    addLog('–î–æ–±–∞–≤–∏–ª –Ω–æ–≤–æ—Å—Ç—å', newsItem.title);
    addNotification('–ù–æ–≤–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!');
  };

  const handleAddGalleryItem = (e: React.FormEvent) => {
    e.preventDefault();
    const galleryItem = {
      id: Date.now().toString(),
      ...newGalleryItem
    };
    setGallery([...gallery, galleryItem]);
    setNewGalleryItem({ title: '', image: '' });
    addLog('–î–æ–±–∞–≤–∏–ª —ç–ª–µ–º–µ–Ω—Ç –≤ –≥–∞–ª–µ—Ä–µ—é', galleryItem.title);
    addNotification('–≠–ª–µ–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥–∞–ª–µ—Ä–µ—é!');
  };

  const handleAddRule = (e: React.FormEvent) => {
    e.preventDefault();
    const rule = {
      id: Date.now().toString(),
      ...newRule
    };
    setRules([...rules, rule]);
    setNewRule({ title: '', desc: '' });
    addLog('–î–æ–±–∞–≤–∏–ª –ø—Ä–∞–≤–∏–ª–æ', rule.title);
    addNotification('–ü—Ä–∞–≤–∏–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!');
  };

  const handleDelete = (id: string, type: 'news' | 'gallery' | 'rules' | 'role' | 'member', name: string) => {
    switch (type) {
      case 'news':
        setNews(news.filter(n => n.id !== id));
        addLog('–£–¥–∞–ª–∏–ª –Ω–æ–≤–æ—Å—Ç—å', name);
        addNotification('–ù–æ–≤–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∞', 'warning');
        break;
      case 'gallery':
        setGallery(gallery.filter(g => g.id !== id));
        addLog('–£–¥–∞–ª–∏–ª —ç–ª–µ–º–µ–Ω—Ç –≥–∞–ª–µ—Ä–µ–∏', name);
        addNotification('–≠–ª–µ–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –≥–∞–ª–µ—Ä–µ–∏', 'warning');
        break;
      case 'rules':
        setRules(rules.filter(r => r.id !== id));
        addLog('–£–¥–∞–ª–∏–ª –ø—Ä–∞–≤–∏–ª–æ', name);
        addNotification('–ü—Ä–∞–≤–∏–ª–æ —É–¥–∞–ª–µ–Ω–æ', 'warning');
        break;
      case 'role':
        setRoles(roles.filter(r => r.id !== id));
        addLog('–£–¥–∞–ª–∏–ª —Ä–æ–ª—å', name);
        addNotification('–†–æ–ª—å —É–¥–∞–ª–µ–Ω–∞', 'warning');
        break;
      case 'member':
        setMembers(members.filter(m => m.id !== id));
        addLog('–£–¥–∞–ª–∏–ª —É—á–∞—Å—Ç–Ω–∏–∫–∞', name);
        addNotification('–£—á–∞—Å—Ç–Ω–∏–∫ —É–¥–∞–ª–µ–Ω', 'warning');
        break;
    }
  };

  const canEdit = currentUser.hasAdminRights;

  return (
    <div className="min-h-screen bg-background relative overflow-hidden">
      {/* Notifications */}
      <div className="fixed top-4 right-4 z-50 space-y-2">
        {notifications.map((notification) => (
          <Alert key={notification.id} className={`w-80 ${
            notification.type === 'success' ? 'border-green-500 bg-green-50' :
            notification.type === 'warning' ? 'border-yellow-500 bg-yellow-50' :
            'border-blue-500 bg-blue-50'
          }`}>
            <Icon name={
              notification.type === 'success' ? 'CheckCircle' :
              notification.type === 'warning' ? 'AlertTriangle' : 'Info'
            } className="h-4 w-4" />
            <AlertDescription>{notification.message}</AlertDescription>
          </Alert>
        ))}
      </div>

      {/* Edit Dialog */}
      <Dialog open={editDialogOpen} onOpenChange={setEditDialogOpen}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å {editType === 'news' ? '–Ω–æ–≤–æ—Å—Ç—å' : editType === 'gallery' ? '—ç–ª–µ–º–µ–Ω—Ç –≥–∞–ª–µ—Ä–µ–∏' : editType === 'rules' ? '–ø—Ä–∞–≤–∏–ª–æ' : '—Ä–æ–ª—å'}</DialogTitle>
          </DialogHeader>
          {editingItem && (
            <div className="space-y-4">
              {editType === 'news' && (
                <>
                  <div>
                    <Label>–ó–∞–≥–æ–ª–æ–≤–æ–∫</Label>
                    <Input
                      value={editingItem.title}
                      onChange={(e) => setEditingItem({...editingItem, title: e.target.value})}
                    />
                  </div>
                  <div>
                    <Label>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ</Label>
                    <Textarea
                      value={editingItem.content}
                      onChange={(e) => setEditingItem({...editingItem, content: e.target.value})}
                    />
                  </div>
                </>
              )}
              {editType === 'gallery' && (
                <>
                  <div>
                    <Label>–ù–∞–∑–≤–∞–Ω–∏–µ</Label>
                    <Input
                      value={editingItem.title}
                      onChange={(e) => setEditingItem({...editingItem, title: e.target.value})}
                    />
                  </div>
                  <div>
                    <Label>URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</Label>
                    <Input
                      value={editingItem.image}
                      onChange={(e) => setEditingItem({...editingItem, image: e.target.value})}
                    />
                  </div>
                </>
              )}
              {editType === 'rules' && (
                <>
                  <div>
                    <Label>–ó–∞–≥–æ–ª–æ–≤–æ–∫</Label>
                    <Input
                      value={editingItem.title}
                      onChange={(e) => setEditingItem({...editingItem, title: e.target.value})}
                    />
                  </div>
                  <div>
                    <Label>–û–ø–∏—Å–∞–Ω–∏–µ</Label>
                    <Textarea
                      value={editingItem.desc}
                      onChange={(e) => setEditingItem({...editingItem, desc: e.target.value})}
                    />
                  </div>
                </>
              )}
              {editType === 'role' && (
                <>
                  <div>
                    <Label>–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏</Label>
                    <Input
                      value={editingItem.name}
                      onChange={(e) => setEditingItem({...editingItem, name: e.target.value})}
                    />
                  </div>
                  <div>
                    <Label>–¶–≤–µ—Ç —Ä–æ–ª–∏</Label>
                    <Input
                      type="color"
                      value={editingItem.color}
                      onChange={(e) => setEditingItem({...editingItem, color: e.target.value})}
                    />
                  </div>
                  <div>
                    <Label>–û–ø–∏—Å–∞–Ω–∏–µ</Label>
                    <Textarea
                      value={editingItem.description}
                      onChange={(e) => setEditingItem({...editingItem, description: e.target.value})}
                    />
                  </div>
                  <div>
                    <Label>–†–∞–∑—Ä–µ—à–µ–Ω–∏—è</Label>
                    <div className="grid grid-cols-1 gap-2 mt-2">
                      {Object.entries(permissionLabels).map(([key, label]) => (
                        <div key={key} className="flex items-center space-x-2">
                          <Checkbox
                            checked={editingItem.permissions?.[key] || false}
                            onCheckedChange={(checked) =>
                              setEditingItem({
                                ...editingItem,
                                permissions: {
                                  ...editingItem.permissions,
                                  [key]: !!checked
                                }
                              })
                            }
                          />
                          <Label className="text-sm">{label}</Label>
                        </div>
                      ))}
                    </div>
                  </div>
                </>
              )}
              <div className="flex space-x-2">
                <Button onClick={handleEditSave}>
                  <Icon name="Save" className="w-4 h-4 mr-2" />
                  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                </Button>
                <Button variant="outline" onClick={() => setEditDialogOpen(false)}>
                  –û—Ç–º–µ–Ω–∞
                </Button>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>

      {/* Japanese Lanterns Background */}
      <div className="fixed inset-0 pointer-events-none opacity-10">
        <div className="absolute top-10 left-10 text-6xl animate-pulse">üèÆ</div>
        <div className="absolute top-32 right-20 text-4xl animate-pulse delay-1000">üèÆ</div>
        <div className="absolute top-64 left-1/4 text-5xl animate-pulse delay-2000">üèÆ</div>
        <div className="absolute bottom-32 right-1/4 text-4xl animate-pulse delay-500">üèÆ</div>
        <div className="absolute bottom-64 left-16 text-6xl animate-pulse delay-1500">üèÆ</div>
        <div className="absolute top-1/2 right-10 text-5xl animate-pulse delay-3000">üèÆ</div>
      </div>

      {/* Header */}
      <header className="border-b border-border bg-card/50 backdrop-blur relative z-10">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <img src="/img/898a4a62-680e-4954-8324-57f0b6423198.jpg" alt="Infernum Logo" className="w-12 h-12 rounded-lg" />
              <div>
                <h1 className="text-2xl font-bold text-primary">INFERNUM CLAN</h1>
                <p className="text-sm text-muted-foreground">–°—Ç–∏–º–ø–∞–Ω–∫ –∏–º–ø–µ—Ä–∏—è –ú–∞–π–Ω–∫—Ä–∞—Ñ—Ç–∞ üèÆ</p>
              </div>
            </div>
            <div className="flex items-center space-x-4">
              <nav className="hidden md:flex space-x-6">
                <a href="#home" className="text-foreground hover:text-primary transition-colors">–ì–ª–∞–≤–Ω–∞—è</a>
                <a href="#members" className="text-foreground hover:text-primary transition-colors">–£—á–∞—Å—Ç–Ω–∏–∫–∏</a>
                <a href="#news" className="text-foreground hover:text-primary transition-colors">–ù–æ–≤–æ—Å—Ç–∏</a>
                <a href="#gallery" className="text-foreground hover:text-primary transition-colors">–ì–∞–ª–µ—Ä–µ—è</a>
                <a href="#rules" className="text-foreground hover:text-primary transition-colors">–ü—Ä–∞–≤–∏–ª–∞</a>
                {currentUser.hasAdminRights && (
                  <>
                    <a href="#roles" className="text-foreground hover:text-primary transition-colors">–†–æ–ª–∏</a>
                    <a href="#logs" className="text-foreground hover:text-primary transition-colors">–õ–æ–≥–∏</a>
                  </>
                )}
              </nav>
              <div className="flex items-center space-x-2">
                <Badge style={{ backgroundColor: currentUser.role === '–ö–æ–Ω—Ñ—É—Ü–∏–π' ? '#dc2626' : '#FFD700' }} className="text-white">
                  {currentUser.role}
                </Badge>
                <Dialog>
                  <DialogTrigger asChild>
                    <Button className="bg-primary hover:bg-primary/90">
                      <Icon name="UserPlus" className="w-4 h-4 mr-2" />
                      –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É
                    </Button>
                  </DialogTrigger>
                  <DialogContent className="max-w-md">
                    <DialogHeader>
                      <DialogTitle>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–ª–∞–Ω</DialogTitle>
                      <DialogDescription>
                        –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ Infernum Clan
                      </DialogDescription>
                    </DialogHeader>
                    <form onSubmit={handleApplicationSubmit} className="space-y-4">
                      <div>
                        <Label htmlFor="username">–ù–∏–∫ –≤ Minecraft</Label>
                        <Input
                          id="username"
                          value={applicationForm.username}
                          onChange={(e) => setApplicationForm({...applicationForm, username: e.target.value})}
                          required
                        />
                      </div>
                      <div>
                        <Label htmlFor="discord">Discord —Ç–µ–≥</Label>
                        <Input
                          id="discord"
                          placeholder="username#1234"
                          value={applicationForm.discordTag}
                          onChange={(e) => setApplicationForm({...applicationForm, discordTag: e.target.value})}
                          required
                        />
                      </div>
                      <div>
                        <Label htmlFor="experience">–û–ø—ã—Ç –∏–≥—Ä—ã</Label>
                        <Textarea
                          id="experience"
                          placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–µ–º –æ–ø—ã—Ç–µ –≤ Minecraft..."
                          value={applicationForm.experience}
                          onChange={(e) => setApplicationForm({...applicationForm, experience: e.target.value})}
                          required
                        />
                      </div>
                      <div>
                        <Label htmlFor="motivation">–ü–æ—á–µ–º—É —Ö–æ—Ç–∏—Ç–µ –≤—Å—Ç—É–ø–∏—Ç—å?</Label>
                        <Textarea
                          id="motivation"
                          placeholder="–ß—Ç–æ –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç –≤–∞—Å –≤ –Ω–∞—à–µ–º –∫–ª–∞–Ω–µ?"
                          value={applicationForm.motivation}
                          onChange={(e) => setApplicationForm({...applicationForm, motivation: e.target.value})}
                          required
                        />
                      </div>
                      <Button type="submit" className="w-full">
                        <Icon name="Send" className="w-4 h-4 mr-2" />
                        –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É
                      </Button>
                    </form>
                  </DialogContent>
                </Dialog>
              </div>
            </div>
          </div>
        </div>
      </header>

      {/* Hero Section */}
      <section id="home" className="py-20 bg-gradient-to-r from-background via-card to-background relative">
        <div className="container mx-auto px-4 text-center relative z-10">
          <div className="max-w-4xl mx-auto">
            <div className="relative mb-8">
              <img src="/img/898a4a62-680e-4954-8324-57f0b6423198.jpg" alt="Infernum Clan" className="w-48 h-48 mx-auto rounded-2xl shadow-2xl" />
              <div className="absolute -top-4 -right-4 text-4xl animate-bounce">üèÆ</div>
              <div className="absolute -bottom-4 -left-4 text-3xl animate-bounce delay-500">‚öôÔ∏è</div>
            </div>
            <h2 className="text-5xl font-bold mb-6 text-primary">INFERNUM CLAN</h2>
            <p className="text-xl text-muted-foreground mb-8 leading-relaxed">
              –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —ç–ª–∏—Ç–Ω—ã–π –º–∞–π–Ω–∫—Ä–∞—Ñ—Ç –∫–ª–∞–Ω, –≥–¥–µ —Å—Ç–∏–º–ø–∞–Ω–∫ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —Å —è–ø–æ–Ω—Å–∫–∏–º–∏ —Ç—Ä–∞–¥–∏—Ü–∏—è–º–∏. 
              –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã, –∏–∑—É—á–∞–π—Ç–µ –¥—Ä–µ–≤–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏ –∏ —Å—Ç–∞–Ω—å—Ç–µ —á–∞—Å—Ç—å—é –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏.
            </p>
            <div className="flex flex-wrap justify-center gap-4">
              <Dialog>
                <DialogTrigger asChild>
                  <Button size="lg" className="bg-primary hover:bg-primary/90">
                    <Icon name="Zap" className="w-5 h-5 mr-2" />
                    –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–ª–∞–Ω—É
                  </Button>
                </DialogTrigger>
                <DialogContent className="max-w-md">
                  <DialogHeader>
                    <DialogTitle>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–ª–∞–Ω</DialogTitle>
                    <DialogDescription>
                      –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ Infernum Clan
                    </DialogDescription>
                  </DialogHeader>
                  <form onSubmit={handleApplicationSubmit} className="space-y-4">
                    <div>
                      <Label htmlFor="username2">–ù–∏–∫ –≤ Minecraft</Label>
                      <Input
                        id="username2"
                        value={applicationForm.username}
                        onChange={(e) => setApplicationForm({...applicationForm, username: e.target.value})}
                        required
                      />
                    </div>
                    <div>
                      <Label htmlFor="discord2">Discord —Ç–µ–≥</Label>
                      <Input
                        id="discord2"
                        placeholder="username#1234"
                        value={applicationForm.discordTag}
                        onChange={(e) => setApplicationForm({...applicationForm, discordTag: e.target.value})}
                        required
                      />
                    </div>
                    <div>
                      <Label htmlFor="experience2">–û–ø—ã—Ç –∏–≥—Ä—ã</Label>
                      <Textarea
                        id="experience2"
                        placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–µ–º –æ–ø—ã—Ç–µ –≤ Minecraft..."
                        value={applicationForm.experience}
                        onChange={(e) => setApplicationForm({...applicationForm, experience: e.target.value})}
                        required
                      />
                    </div>
                    <div>
                      <Label htmlFor="motivation2">–ü–æ—á–µ–º—É —Ö–æ—Ç–∏—Ç–µ –≤—Å—Ç—É–ø–∏—Ç—å?</Label>
                      <Textarea
                        id="motivation2"
                        placeholder="–ß—Ç–æ –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç –≤–∞—Å –≤ –Ω–∞—à–µ–º –∫–ª–∞–Ω–µ?"
                        value={applicationForm.motivation}
                        onChange={(e) => setApplicationForm({...applicationForm, motivation: e.target.value})}
                        required
                      />
                    </div>
                    <Button type="submit" className="w-full">
                      <Icon name="Send" className="w-4 h-4 mr-2" />
                      –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É
                    </Button>
                  </form>
                </DialogContent>
              </Dialog>
              <Button variant="outline" size="lg">
                <Icon name="MessageSquare" className="w-5 h-5 mr-2" />
                Discord —Å–µ—Ä–≤–µ—Ä
              </Button>
            </div>
          </div>
        </div>
      </section>

      {/* Main Content */}
      <main className="container mx-auto px-4 py-12 relative z-10">
        <Tabs defaultValue="roles" className="w-full">
          <TabsList className={`grid w-full ${currentUser.hasAdminRights ? 'grid-cols-6' : 'grid-cols-4'} mb-8`}>
            <TabsTrigger value="members">–£—á–∞—Å—Ç–Ω–∏–∫–∏</TabsTrigger>
            <TabsTrigger value="news">–ù–æ–≤–æ—Å—Ç–∏</TabsTrigger>
            <TabsTrigger value="gallery">–ì–∞–ª–µ—Ä–µ—è</TabsTrigger>
            <TabsTrigger value="rules">–ü—Ä–∞–≤–∏–ª–∞</TabsTrigger>
            {currentUser.hasAdminRights && (
              <>
                <TabsTrigger value="roles">–†–æ–ª–∏</TabsTrigger>
                <TabsTrigger value="logs">–õ–æ–≥–∏</TabsTrigger>
              </>
            )}
          </TabsList>

          <TabsContent value="members" id="members">
            <div className="space-y-6">
              <div className="text-center mb-8">
                <div className="flex items-center justify-center space-x-4">
                  <h3 className="text-3xl font-bold mb-2">–£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–ª–∞–Ω–∞</h3>
                  {canEdit && (
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => setEditMode({...editMode, members: !editMode.members})}
                    >
                      <Icon name="Edit" className="w-4 h-4 mr-2" />
                      {editMode.members ? '–ì–æ—Ç–æ–≤–æ' : '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'}
                    </Button>
                  )}
                </div>
                <p className="text-muted-foreground">–ü–æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–∏–º–∏ —Ç–∞–ª–∞–Ω—Ç–ª–∏–≤—ã–º–∏ –∏–Ω–∂–µ–Ω–µ—Ä–∞–º–∏ üèÆ</p>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {members.map((member, index) => (
                  <Card key={index} className="hover:shadow-lg transition-shadow">
                    <CardHeader className="pb-3">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center space-x-3">
                          <div className="w-12 h-12 bg-gradient-to-r from-primary to-secondary rounded-full flex items-center justify-center">
                            <Icon name="User" className="w-6 h-6 text-white" />
                          </div>
                          <div>
                            <CardTitle className="text-lg">{member.name}</CardTitle>
                            <CardDescription>{member.role}</CardDescription>
                          </div>
                        </div>
                        <div className={`w-3 h-3 rounded-full ${
                          member.status === 'online' ? 'bg-green-500' :
                          member.status === 'away' ? 'bg-yellow-500' : 'bg-gray-500'
                        }`} />
                      </div>
                    </CardHeader>
                    <CardContent>
                      <div className="flex items-center justify-between">
                        <Badge style={{ backgroundColor: member.roleColor }} className="text-white">
                          {member.rank}
                        </Badge>
                        {editMode.members && canEdit && (
                          <div className="flex space-x-2">
                            <Select value={member.rank} onValueChange={(value) => {
                              const roleId = roles.find(r => r.name === value)?.id;
                              if (roleId) handleMemberRoleChange(member.id, roleId);
                            }}>
                              <SelectTrigger className="w-32">
                                <SelectValue />
                              </SelectTrigger>
                              <SelectContent>
                                {roles.map((role) => (
                                  <SelectItem key={role.id} value={role.name}>
                                    <span style={{ color: role.color }}>{role.name}</span>
                                  </SelectItem>
                                ))}
                              </SelectContent>
                            </Select>
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => handleDelete(member.id, 'member', member.name)}
                            >
                              <Icon name="Trash2" className="w-4 h-4" />
                            </Button>
                          </div>
                        )}
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </div>
          </TabsContent>

          <TabsContent value="news" id="news">
            <div className="space-y-6">
              <div className="text-center mb-8">
                <div className="flex items-center justify-center space-x-4">
                  <h3 className="text-3xl font-bold mb-2">–ù–æ–≤–æ—Å—Ç–∏ –∫–ª–∞–Ω–∞</h3>
                  {canEdit && (
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => setEditMode({...editMode, news: !editMode.news})}
                    >
                      <Icon name="Edit" className="w-4 h-4 mr-2" />
                      {editMode.news ? '–ì–æ—Ç–æ–≤–æ' : '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'}
                    </Button>
                  )}
                </div>
                <p className="text-muted-foreground">–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è üèÆ</p>
              </div>

              {editMode.news && canEdit && (
                <Card className="mb-6">
                  <CardHeader>
                    <CardTitle>–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <form onSubmit={handleAddNews} className="space-y-4">
                      <div>
                        <Label htmlFor="newsTitle">–ó–∞–≥–æ–ª–æ–≤–æ–∫</Label>
                        <Input
                          id="newsTitle"
                          value={newNewsItem.title}
                          onChange={(e) => setNewNewsItem({...newNewsItem, title: e.target.value})}
                          required
                        />
                      </div>
                      <div>
                        <Label htmlFor="newsContent">–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ</Label>
                        <Textarea
                          id="newsContent"
                          value={newNewsItem.content}
                          onChange={(e) => setNewNewsItem({...newNewsItem, content: e.target.value})}
                          required
                        />
                      </div>
                      <Button type="submit">
                        <Icon name="Plus" className="w-4 h-4 mr-2" />
                        –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å
                      </Button>
                    </form>
                  </CardContent>
                </Card>
              )}

              <div className="space-y-6">
                {news.map((item, index) => (
                  <Card key={index} className="hover:shadow-lg transition-shadow">
                    <CardHeader>
                      <div className="flex items-center justify-between">
                        <CardTitle className="text-xl">{item.title}</CardTitle>
                        <div className="flex items-center space-x-2">
                          <Badge variant="outline">{item.date}</Badge>
                          {editMode.news && canEdit && (
                            <div className="flex space-x-1">
                              <Button
                                variant="outline"
                                size="sm"
                                onClick={() => openEditDialog(item, 'news')}
                              >
                                <Icon name="Edit" className="w-4 h-4" />
                              </Button>
                              <Button
                                variant="outline"
                                size="sm"
                                onClick={() => handleDelete(item.id, 'news', item.title)}
                              >
                                <Icon name="Trash2" className="w-4 h-4" />
                              </Button>
                            </div>
                          )}
                        </div>
                      </div>
                    </CardHeader>
                    <CardContent>
                      <p className="text-muted-foreground leading-relaxed">{item.content}</p>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </div>
          </TabsContent>

          <TabsContent value="gallery" id="gallery">
            <div className="space-y-6">
              <div className="text-center mb-8">
                <div className="flex items-center justify-center space-x-4">
                  <h3 className="text-3xl font-bold mb-2">–ì–∞–ª–µ—Ä–µ—è</h3>
                  {canEdit && (
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => setEditMode({...editMode, gallery: !editMode.gallery})}
                    >
                      <Icon name="Edit" className="w-4 h-4 mr-2" />
                      {editMode.gallery ? '–ì–æ—Ç–æ–≤–æ' : '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'}
                    </Button>
                  )}
                </div>
                <p className="text-muted-foreground">–ù–∞—à–∏ –ª—É—á—à–∏–µ —Ç–≤–æ—Ä–µ–Ω–∏—è –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è üèÆ</p>
              </div>

              {editMode.gallery && canEdit && (
                <Card className="mb-6">
                  <CardHeader>
                    <CardTitle>–î–æ–±–∞–≤–∏—Ç—å –≤ –≥–∞–ª–µ—Ä–µ—é</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <form onSubmit={handleAddGalleryItem} className="space-y-4">
                      <div>
                        <Label htmlFor="galleryTitle">–ù–∞–∑–≤–∞–Ω–∏–µ</Label>
                        <Input
                          id="galleryTitle"
                          value={newGalleryItem.title}
                          onChange={(e) => setNewGalleryItem({...newGalleryItem, title: e.target.value})}
                          required
                        />
                      </div>
                      <div>
                        <Label htmlFor="galleryImage">URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</Label>
                        <Input
                          id="galleryImage"
                          value={newGalleryItem.image}
                          onChange={(e) => setNewGalleryItem({...newGalleryItem, image: e.target.value})}
                          placeholder="/img/example.jpg"
                          required
                        />
                      </div>
                      <Button type="submit">
                        <Icon name="Plus" className="w-4 h-4 mr-2" />
                        –î–æ–±–∞–≤–∏—Ç—å –≤ –≥–∞–ª–µ—Ä–µ—é
                      </Button>
                    </form>
                  </CardContent>
                </Card>
              )}

              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {gallery.map((item, index) => (
                  <Card key={index} className="overflow-hidden hover:shadow-lg transition-shadow">
                    <div className="aspect-video overflow-hidden relative">
                      <img 
                        src={item.image} 
                        alt={item.title}
                        className="w-full h-full object-cover hover:scale-105 transition-transform duration-300"
                      />
                      {editMode.gallery && canEdit && (
                        <div className="absolute top-2 right-2 space-x-1">
                          <Button
                            variant="secondary"
                            size="sm"
                            onClick={() => openEditDialog(item, 'gallery')}
                          >
                            <Icon name="Edit" className="w-4 h-4" />
                          </Button>
                          <Button
                            variant="destructive"
                            size="sm"
                            onClick={() => handleDelete(item.id, 'gallery', item.title)}
                          >
                            <Icon name="Trash2" className="w-4 h-4" />
                          </Button>
                        </div>
                      )}
                    </div>
                    <CardContent className="p-4">
                      <h4 className="font-semibold text-lg">{item.title}</h4>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </div>
          </TabsContent>

          <TabsContent value="rules" id="rules">
            <div className="space-y-6">
              <div className="text-center mb-8">
                <div className="flex items-center justify-center space-x-4">
                  <h3 className="text-3xl font-bold mb-2">–ü—Ä–∞–≤–∏–ª–∞ –∫–ª–∞–Ω–∞</h3>
                  {canEdit && (
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => setEditMode({...editMode, rules: !editMode.rules})}
                    >
                      <Icon name="Edit" className="w-4 h-4 mr-2" />
                      {editMode.rules ? '–ì–æ—Ç–æ–≤–æ' : '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'}
                    </Button>
                  )}
                </div>
                <p className="text-muted-foreground">–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –Ω–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ üèÆ</p>
              </div>

              {editMode.rules && canEdit && (
                <Card className="mb-6">
                  <CardHeader>
                    <CardTitle>–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª–æ</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <form onSubmit={handleAddRule} className="space-y-4">
                      <div>
                        <Label htmlFor="ruleTitle">–ó–∞–≥–æ–ª–æ–≤–æ–∫</Label>
                        <Input
                          id="ruleTitle"
                          value={newRule.title}
                          onChange={(e) => setNewRule({...newRule, title: e.target.value})}
                          required
                        />
                      </div>
                      <div>
                        <Label htmlFor="ruleDesc">–û–ø–∏—Å–∞–Ω–∏–µ</Label>
                        <Textarea
                          id="ruleDesc"
                          value={newRule.desc}
                          onChange={(e) => setNewRule({...newRule, desc: e.target.value})}
                          required
                        />
                      </div>
                      <Button type="submit">
                        <Icon name="Plus" className="w-4 h-4 mr-2" />
                        –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª–æ
                      </Button>
                    </form>
                  </CardContent>
                </Card>
              )}

              <div className="space-y-4">
                {rules.map((rule, index) => (
                  <Card key={index} className="hover:shadow-lg transition-shadow">
                    <CardHeader className="pb-3">
                      <CardTitle className="flex items-center justify-between">
                        <div className="flex items-center space-x-3">
                          <span className="flex items-center justify-center w-8 h-8 bg-primary text-primary-foreground rounded-full text-sm font-bold">
                            {index + 1}
                          </span>
                          <span>{rule.title}</span>
                        </div>
                        {editMode.rules && canEdit && (
                          <div className="flex space-x-1">
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => openEditDialog(rule, 'rules')}
                            >
                              <Icon name="Edit" className="w-4 h-4" />
                            </Button>
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => handleDelete(rule.id, 'rules', rule.title)}
                            >
                              <Icon name="Trash2" className="w-4 h-4" />
                            </Button>
                          </div>
                        )}
                      </CardTitle>
                    </CardHeader>
                    <CardContent>
                      <p className="text-muted-foreground leading-relaxed">{rule.desc}</p>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </div>
          </TabsContent>

          {currentUser.hasAdminRights && (
            <>
              <TabsContent value="roles" id="roles">
                <div className="space-y-6">
                  <div className="text-center mb-8">
                    <h3 className="text-3xl font-bold mb-2">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏</h3>
                    <p className="text-muted-foreground">–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏ —É–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ä–æ–ª—è–º–∏ –∫–ª–∞–Ω–∞ üèÆ</p>
                  </div>
                  
                  <Card className="mb-6">
                    <CardHeader>
                      <CardTitle>–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ä–æ–ª—å</CardTitle>
                      <CardDescription>–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º —Ü–≤–µ—Ç–æ–º –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è–º–∏</CardDescription>
                    </CardHeader>
                    <CardContent>
                      <form onSubmit={handleCreateRole} className="space-y-4">
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div>
                            <Label htmlFor="roleName">–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏</Label>
                            <Input
                              id="roleName"
                              value={newRole.name}
                              onChange={(e) => setNewRole({...newRole, name: e.target.value})}
                              placeholder="–ù–æ–≤–∞—è —Ä–æ–ª—å"
                              required
                            />
                          </div>
                          <div>
                            <Label htmlFor="roleColor">–¶–≤–µ—Ç —Ä–æ–ª–∏</Label>
                            <Input
                              id="roleColor"
                              type="color"
                              value={newRole.color}
                              onChange={(e) => setNewRole({...newRole, color: e.target.value})}
                              required
                            />
                          </div>
                        </div>
                        <div>
                          <Label htmlFor="roleDescription">–û–ø–∏—Å–∞–Ω–∏–µ</Label>
                          <Textarea
                            id="roleDescription"
                            value={newRole.description}
                            onChange={(e) => setNewRole({...newRole, description: e.target.value})}
                            placeholder="–û–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–ª–∏..."
                            required
                          />
                        </div>
                        <div>
                          <Label>–†–∞–∑—Ä–µ—à–µ–Ω–∏—è</Label>
                          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-2">
                            {Object.entries(permissionLabels).map(([key, label]) => (
                              <div key={key} className="flex items-center space-x-2">
                                <Checkbox
                                  id={key}
                                  checked={newRole.permissions[key as keyof typeof newRole.permissions]}
                                  onCheckedChange={(checked) =>
                                    setNewRole({
                                      ...newRole,
                                      permissions: {
                                        ...newRole.permissions,
                                        [key]: !!checked
                                      }
                                    })
                                  }
                                />
                                <Label htmlFor={key} className="text-sm">
                                  {label}
                                </Label>
                              </div>
                            ))}
                          </div>
                        </div>
                        <Button type="submit">
                          <Icon name="Plus" className="w-4 h-4 mr-2" />
                          –°–æ–∑–¥–∞—Ç—å —Ä–æ–ª—å
                        </Button>
                      </form>
                    </CardContent>
                  </Card>

                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    {roles.map((role) => (
                      <Card key={role.id} className="hover:shadow-lg transition-shadow">
                        <CardHeader>
                          <CardTitle className="flex items-center justify-between">
                            <div className="flex items-center space-x-3">
                              <div 
                                className="w-4 h-4 rounded-full"
                                style={{ backgroundColor: role.color }}
                              />
                              <span style={{ color: role.color }}>{role.name}</span>
                            </div>
                            {role.name !== '–ö–æ–Ω—Ñ—É—Ü–∏–π' && (
                              <div className="flex space-x-1">
                                <Button
                                  variant="outline"
                                  size="sm"
                                  onClick={() => openEditDialog(role, 'role')}
                                >
                                  <Icon name="Edit" className="w-4 h-4" />
                                </Button>
                                <Button
                                  variant="outline"
                                  size="sm"
                                  onClick={() => handleDelete(role.id, 'role', role.name)}
                                >
                                  <Icon name="Trash2" className="w-4 h-4" />
                                </Button>
                              </div>
                            )}
                          </CardTitle>
                          <CardDescription>{role.description}</CardDescription>
                        </CardHeader>
                        <CardContent>
                          <div className="space-y-2">
                            <div className="flex items-center justify-between">
                              <Badge style={{ backgroundColor: role.color }} className="text-white">
                                {role.color}
                              </Badge>
                            </div>
                            <div className="text-sm">
                              <p className="font-medium mb-2">–†–∞–∑—Ä–µ—à–µ–Ω–∏—è:</p>
                              <div className="space-y-1">
                                {Object.entries(role.permissions).map(([key, value]) => (
                                  <div key={key} className="flex items-center space-x-2">
                                    <div className={`w-2 h-2 rounded-full ${value ? 'bg-green-500' : 'bg-gray-300'}`} />
                                    <span className={`text-xs ${value ? 'text-green-600' : 'text-gray-500'}`}>
                                      {permissionLabels[key as keyof typeof permissionLabels]}
                                    </span>
                                  </div>
                                ))}
                              </div>
                            </div>
                          </div>
                        </CardContent>
                      </Card>
                    ))}
                  </div>
                </div>
              </TabsContent>

              <TabsContent value="logs" id="logs">
                <div className="space-y-6">
                  <div className="text-center mb-8">
                    <h3 className="text-3xl font-bold mb-2">–õ–æ–≥–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</h3>
                    <p className="text-muted-foreground">–ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ üèÆ</p>
                  </div>

                  <div className="space-y-4">
                    {activityLogs.map((log) => (
                      <Card key={log.id} className="hover:shadow-lg transition-shadow">
                        <CardContent className="py-4">
                          <div className="flex items-center justify-between">
                            <div className="flex items-center space-x-4">
                              <div className="w-10 h-10 bg-gradient-to-r from-primary to-secondary rounded-full flex items-center justify-center">
                                <Icon name="Activity" className="w-5 h-5 text-white" />
                              </div>
                              <div>
                                <p className="font-medium">
                                  <span className="text-primary">{log.user}</span> {log.action}
                                </p>
                                <p className="text-sm text-muted-foreground">
                                  –¶–µ–ª—å: {log.target}
                                </p>
                              </div>
                            </div>
                            <div className="text-right">
                              <p className="text-sm font-medium">
                                {log.timestamp.toLocaleDateString('ru-RU')}
                              </p>
                              <p className="text-xs text-muted-foreground">
                                {log.timestamp.toLocaleTimeString('ru-RU')}
                              </p>
                            </div>
                          </div>
                        </CardContent>
                      </Card>
                    ))}
                  </div>
                </div>
              </TabsContent>
            </>
          )}
        </Tabs>
      </main>

      {/* Footer */}
      <footer className="border-t border-border bg-card/50 mt-20 relative z-10">
        <div className="container mx-auto px-4 py-8">
          <div className="text-center">
            <div className="flex items-center justify-center space-x-4 mb-4">
              <img src="/img/898a4a62-680e-4954-8324-57f0b6423198.jpg" alt="Infernum" className="w-8 h-8 rounded" />
              <h4 className="text-lg font-bold">INFERNUM CLAN</h4>
              <span className="text-2xl">üèÆ</span>
            </div>
            <p className="text-muted-foreground mb-4">
              –°—Ç–∏–º–ø–∞–Ω–∫ –∏–º–ø–µ—Ä–∏—è –ú–∞–π–Ω–∫—Ä–∞—Ñ—Ç–∞ ‚Ä¢ –°–æ–∑–¥–∞–Ω–æ —Å ‚ö° –≤ 2025
            </p>
            <Separator className="my-4" />
            <div className="flex justify-center space-x-6 text-sm text-muted-foreground">
              <span>¬© 2025 Infernum Clan</span>
              <span>‚Ä¢</span>
              <a href="#" className="hover:text-primary transition-colors">Discord</a>
              <span>‚Ä¢</span>
              <a href="#" className="hover:text-primary transition-colors">–ü—Ä–∞–≤–∏–ª–∞</a>
            </div>
          </div>
        </div>
      </footer>
    </div>
  );
};

export default Index;